import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.7.16'
        springCloudBomVersion = "2021.0.8"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.5.7")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.0.2'
    id 'org.sonarqube' version '3.3'
    id 'org.springframework.boot' version '2.7.16'
    id 'info.solidsoft.pitest' version '1.9.11'
    id 'uk.gov.hmcts.java' version '0.12.46'
}

apply plugin: 'checkstyle'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'org.owasp.dependencycheck'

springBoot {
    mainClass = 'uk.gov.hmcts.reform.divorce.caseformatterservice.CaseFormatterServiceApplication'
}

jacoco {
    toolVersion = "0.8.11"
}

group = 'uk.gov.hmcts.reform.divorce'
version = '1.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

bootJar {
    archiveFileName = 'div-case-formatter-service.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
    }
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudBomVersion}"
    }
    dependencies {
        dependency group: 'org.bouncycastle',name : 'bcprov-jdk15on', version: '1.61'
        dependencySet(
            group: 'com.fasterxml.jackson.core',
            version: '2.10.0'
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }
        dependency group: 'org.glassfish', name: 'jakarta.el', version: '3.0.4'

        // CVE-2018-10237 - Unbounded memory allocation
        dependencySet(group: 'com.google.guava', version: '31.1-jre') {
            entry 'guava'
        }

        //CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105
        dependencySet(group: 'org.apache.logging.log4j', version: '2.17.1') {
            entry 'log4j-api'
            entry 'log4j-to-slf4j'
        }

        //CVE-2022-22965, CVE-2022-22971
        dependencySet(group: 'org.springframework', version: '5.3.30') {
            entry 'spring-aop'
            entry 'spring-beans'
            entry 'spring-context'
            entry 'spring-context-support'
            entry 'spring-core'
            entry 'spring-expression'
            entry 'spring-jcl'
            entry 'spring-web'
            entry 'spring-webmvc'
        }

        dependencySet(group: 'org.yaml', version: '1.33') {
            entry 'snakeyaml'
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://jitpack.io" }
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

checkstyle.toolVersion = '8.32'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")
checkstyle.maxWarnings(0)

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

def versions = [
    commonsCollections4   : '4.4',
    commonsIo             : '2.7',
    commonsLang3          : '3.9',
    divCommonLib          : '1.2.21_DFR-829',
    feignHttpClient       : '10.7.4',
    gradlePitest          : '1.4.6',
    guava                 : '32.1.3-jre',
    httpComponents        : '4.5.14',
    jsonAssert            : '1.2.3',
    jsonPathAssert        : '2.2.0',
    junit                 : '5.9.3',
    lombok                : '1.18.30',
    pitest                : '1.3.2',
    puppyCrawl            : '8.29',
    reformPropertiesVolume: '0.0.4',
    reformsJavaLogging    : '5.1.7',
    restAssured           : '4.2.1',
    serenity              : '2.5.8',
    serenityCucumber      : '1.9.51',
    sonarPitest           : '0.5',
    springBoot            : '2.7.16',
    springDoc             : '1.6.9',
    springOpenFeign       : '2.2.7.RELEASE',
    spring_security_rsa   : '1.0.9.RELEASE',
    springSecurityCrypto  : '5.4.5',
    tomcatEmbed           : '9.0.82',
    unirest               : '1.4.9',
    wiremockVersion       : '2.27.2',
    logbackVersion        : '1.2.10'
]

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    useJUnit()
    failFast = true
}

dependencies {

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logbackVersion
    implementation group: 'ch.qos.logback', name: 'logback-core', version: versions.logbackVersion

    implementation group: 'com.google.guava', name: 'guava', version: versions.guava

    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springOpenFeign)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }

    implementation(group: 'org.springframework.security', name: 'spring-security-rsa', version: versions.spring_security_rsa) {
        force = true
    }

    implementation(group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto) {
        force = true
    }

    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcatEmbed
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcatEmbed
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: versions.tomcatEmbed

    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.17'

    implementation group: 'org.apache.commons', name: 'commons-collections4', version: versions.commonsCollections4
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3

    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents
    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging

    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation "com.github.hmcts:div-common-lib:${versions.divCommonLib}"

    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremockVersion
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
    testImplementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert
    testImplementation('com.github.hmcts:fortify-client:1.2.0:all')

    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot

    //integration test
    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured-all', version: versions.restAssured
    integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestImplementation group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

    integrationTestImplementation(sourceSets.test.output)
    integrationTestAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.caseformatterservice.category.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    environment "http_proxy", "http://proxyout.reform.hmcts.net:8080"
    main = bootJar.mainClass
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
        systemProperty 'http.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'http.proxyPort', '8080'
        systemProperty 'https.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'https.proxyPort', '8080'
    }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    useJUnit()
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.caseformatterservice.*'

    ]
    excludedClasses = ['uk.gov.hmcts.reform.divorce.caseformatterservice.config.*',
                       'uk.gov.hmcts.reform.divorce.caseformatterservice.management.config.*',
                       'uk.gov.hmcts.reform.divorce.caseformatterservice.domain.model.*']
    threads = 16
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

def sonarExclusions = [
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/domain/**/*',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/**/config/**/*',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/CaseFormatterServiceApplication.java'
]

def sonarCpdExclusions = [
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/mapper/CCDCaseToDivorceMapper.java',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/mapper/DivorceCaseToCCDMapper.java'
]

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.cpd.exclusions", sonarCpdExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.projectKey", "DivorceCaseFormatterService"
        property "sonar.projectName", "Divorce :: case-formatter-service"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

task developAddRelaseSuffix() {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

task fortifyScan(type: JavaExec)  {
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
