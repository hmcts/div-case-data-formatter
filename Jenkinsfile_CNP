#!groovy

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Divorce Case Formatter Service',
        projectUrlStr: 'https://github.com/hmcts/div-case-formatter-service'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "div"
def component = "cfs"

def channel = '#div-dev'

def labels = [
    "enable_fortify_scan",
]
def ATLabels
node() {
    ATLabels = load '${jenkins_home}/workspace/${job_name}@script/check_additional_test_labels.groovy'
    ATLabels.checkLabels(labels)
}

withPipeline(type , product, component) {

    enableAksStagingDeployment()
    disableLegacyDeployment()

    after('checkout') {
        echo '${product}-${component} checked out'
    }

    before('functionalTest:aat') {
        env.test_environment = 'aat'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    // Kubernetes does not retrieve variables from the output terraform
    before('functionalTest:preview') {
        env.test_environment = 'aat'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    enableSlackNotifications(channel)
}

if (ATLabels.isAtLeastOneEnabled()) {
    properties([
        parameters([
            string(name: 'URL_TO_TEST', defaultValue: 'http://div-cfs-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against')
        ])
    ])

    withNightlyPipeline(type, product, component) {
        env.TEST_URL = params.URL_TO_TEST
        env.Rules = params.SecurityRules

        if (ATLabels.getLabelState("enable_fortify_scan")) {
            enableFortifyScan()

            after('fortify-scan') {
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
            }
        }
    }
}
