import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()

        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.1.6")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'org.sonarqube' version '2.8'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'info.solidsoft.pitest' version '1.4.6'
}

apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '1.0.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    archiveFileName = 'div-case-formatter-service.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
    }
}

mainClassName = 'uk.gov.hmcts.reform.divorce.caseformatterservice.CaseFormatterServiceApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-openfeign:2.2.1.RELEASE'
    }
    dependencies {
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
        //CVE-2017-18640
        dependency group: 'org.yaml', name: 'snakeyaml', version: '1.26'
        dependencySet(
            group: 'com.fasterxml.jackson.core',
            version: '2.10.0'
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

def versions = [
    commonsCollections4          : '4.4',
    commonsIo                    : '2.6',
    commonsLang3                 : '3.9',
    feignHttpClient              : '10.7.4',
    gradlePitest                 : '1.4.6',
    guava                        : '28.2-jre',
    jacksonDatabind              : '2.10.2',
    jsonAssert                   : '1.2.3',
    jsonPathAssert               : '2.2.0',
    junit                        : '4.13',
    lombok                       : '1.16.16',
    mapstruct                    : '1.2.0.Final',
    orgSpringframework           : '5.2.3.RELEASE',
    pitest                       : '1.3.2',
    puppyCrawl                   : '8.29',
    reformHealth                 : '0.0.5',
    reformPropertiesVolume       : '0.0.4',
    reformsJavaLogging           : '5.1.1',
    reformSpringBootAutoConfigure: '2.0.0',
    restAssured                  : '3.0.3',
    serenity                     : '2.1.2',
    serenityCucumber             : '1.9.51',
    sonarPitest                  : '0.5',
    spring_security_rsa          : '1.0.8.RELEASE',
    springfoxSwagger             : '2.9.2',
    unirest                      : '1.4.9',
    wiremockVersion              : '2.25.1',
    springSecurityCrypto         : '5.2.4.RELEASE',
    springOpenFeign              : '2.2.1.RELEASE',
    tomcatEmbed                  : '9.0.37'
]

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')

    compile group: 'org.springframework', name: 'spring-context-support', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-webmvc', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-web', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-aop', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-beans', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-expression', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-core', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-jcl', version: versions.orgSpringframework
    compile group: 'org.springframework', name: 'spring-context', version: versions.orgSpringframework

    compile(group: 'com.google.guava', name: 'guava', version: versions.guava) {
        force = true
    }

    compile(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springOpenFeign)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }

    compile(group: 'org.springframework.security', name: 'spring-security-rsa', version: versions.spring_security_rsa) {
        force = true
    }

    compile(group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto) {
        force = true
    }

    compile(group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcatEmbed) {
        force = true
    }
    compile(group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcatEmbed) {
        force = true
    }
    compile(group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: versions.tomcatEmbed) {
        force = true
    }

    compile group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: versions.reformSpringBootAutoConfigure
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind) {
        force = true
    }

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    compile group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    compile(group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger)
        {
            exclude(module: 'mapstruct')
        }
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    annotationProcessor("org.mapstruct:mapstruct-processor:${versions.mapstruct}")
    compile group: 'org.mapstruct', name: 'mapstruct-jdk8', version: versions.mapstruct

    compile group: 'org.apache.commons', name: 'commons-collections4', version: versions.commonsCollections4
    compile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3

    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealth
    compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging

    compile group: 'org.pitest', name: 'pitest', version: versions.pitest
    compile group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    compile group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest

    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    compileOnly group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapstruct
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremockVersion
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert

    runtime('org.springframework.boot:spring-boot-devtools')

    //integration test
    integrationTestCompile group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestCompile group: 'junit', name: 'junit', version: versions.junit
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestCompile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestCompile group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    integrationTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

dependencies {
    integrationTestCompile(sourceSets.test.output)
    integrationTestAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.caseformatterservice.category.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    environment "http_proxy", "http://proxyout.reform.hmcts.net:8080"
    doFirst() {
        main = bootJar.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'aat'
    }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    finalizedBy aggregate
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.caseformatterservice.*'

    ]
    excludedClasses = ['uk.gov.hmcts.reform.divorce.caseformatterservice.config.*',
                       'uk.gov.hmcts.reform.divorce.caseformatterservice.management.config.*',
                       'uk.gov.hmcts.reform.divorce.caseformatterservice.domain.model.*']
    threads = 16
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

def sonarExclusions = [
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/domain/**/*',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/**/config/**/*',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/CaseFormatterServiceApplication.java'
]

def sonarCpdExclusions = [
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/mapper/CCDCaseToDivorceMapper.java',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/mapper/DivorceCaseToCCDMapper.java'
]

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.cpd.exclusions", sonarCpdExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.projectKey", "DivorceCaseFormatterService"
        property "sonar.projectName", "Divorce :: case-formatter-service"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

task developAddRelaseSuffix() {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}
