import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.13")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '6.0.2'
    id 'org.sonarqube' version '3.0'
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'info.solidsoft.pitest' version '1.5.2'
}

apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '1.0.1'
sourceCompatibility = 11
targetCompatibility = 11

bootJar {
    archiveFileName = 'div-case-formatter-service.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
    }
}

mainClassName = 'uk.gov.hmcts.reform.divorce.caseformatterservice.CaseFormatterServiceApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

dependencyManagement {
    dependencies {
        //CVE-2017-18640
        dependency group: 'org.yaml', name: 'snakeyaml', version: '1.26'
        //CVE-2020-26939
        dependency group: 'org.bouncycastle',name : 'bcprov-jdk15on', version: '1.61'
        dependencySet(
            group: 'com.fasterxml.jackson.core',
            version: '2.10.0'
        ) {
            entry 'jackson-core'
            entry 'jackson-databind'
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://dl.bintray.com/hmcts/hmcts-maven' }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

def versions = [
    commonsCollections4   : '4.4',
    commonsIo             : '2.6',
    commonsLang3          : '3.9',
    divCommonLib          : '1.2.13',
    feignHttpClient       : '10.7.4',
    gradlePitest          : '1.4.6',
    guava                 : '30.1-jre',
    httpComponents        : '4.5.13',
    jsonAssert            : '1.2.3',
    jsonPathAssert        : '2.2.0',
    junit                 : '4.13.1',
    lombok                : '1.18.12',
    pitest                : '1.3.2',
    puppyCrawl            : '8.29',
    reformPropertiesVolume: '0.0.4',
    reformsJavaLogging    : '5.1.7',
    restAssured           : '3.0.3',
    serenity              : '2.2.13',
    serenityCucumber      : '1.9.51',
    sonarPitest           : '0.5',
    springBoot            : '2.3.5.RELEASE',
    springfoxSwagger      : '2.9.2',
    springOpenFeign       : '2.2.6.RELEASE',
    spring_security_rsa   : '1.0.9.RELEASE',
    springSecurityCrypto  : '5.4.5',
    tomcatEmbed           : '9.0.43',
    unirest               : '1.4.9',
    wiremockVersion       : '2.27.2'
]

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

    implementation group: 'org.springframework', name: 'spring-context-support'
    implementation group: 'org.springframework', name: 'spring-webmvc'
    implementation group: 'org.springframework', name: 'spring-web'
    implementation group: 'org.springframework', name: 'spring-aop'
    implementation group: 'org.springframework', name: 'spring-beans'
    implementation group: 'org.springframework', name: 'spring-expression'
    implementation group: 'org.springframework', name: 'spring-core'
    implementation group: 'org.springframework', name: 'spring-jcl'
    implementation group: 'org.springframework', name: 'spring-context'

    implementation(group: 'com.google.guava', name: 'guava', version: versions.guava) {
        force = true
    }

    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springOpenFeign)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }

    implementation(group: 'org.springframework.security', name: 'spring-security-rsa', version: versions.spring_security_rsa) {
        force = true
    }

    implementation(group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto) {
        force = true
    }

    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcatEmbed
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcatEmbed
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: versions.tomcatEmbed

    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation(group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger)
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    implementation group: 'org.apache.commons', name: 'commons-collections4', version: versions.commonsCollections4
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3

    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents
    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging

    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'uk.gov.hmcts.reform', name: 'div-common-lib', version: versions.divCommonLib

    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremockVersion
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
    testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert

    runtime group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot

    //integration test
    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestImplementation group: 'junit', name: 'junit', version: versions.junit
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestImplementation group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

dependencies {
    integrationTestImplementation(sourceSets.test.output)
    integrationTestAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.caseformatterservice.category.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    environment "http_proxy", "http://proxyout.reform.hmcts.net:8080"
    main = bootJar.mainClassName
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
        systemProperty 'http.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'http.proxyPort', '8080'
        systemProperty 'https.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'https.proxyPort', '8080'
    }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    finalizedBy aggregate
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.caseformatterservice.*'

    ]
    excludedClasses = ['uk.gov.hmcts.reform.divorce.caseformatterservice.config.*',
                       'uk.gov.hmcts.reform.divorce.caseformatterservice.management.config.*',
                       'uk.gov.hmcts.reform.divorce.caseformatterservice.domain.model.*']
    threads = 16
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

def sonarExclusions = [
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/domain/**/*',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/**/config/**/*',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/CaseFormatterServiceApplication.java'
]

def sonarCpdExclusions = [
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/mapper/CCDCaseToDivorceMapper.java',
    '**uk/gov/hmcts/reform/divorce/caseformatterservice/mapper/DivorceCaseToCCDMapper.java'
]

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.cpd.exclusions", sonarCpdExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.projectKey", "DivorceCaseFormatterService"
        property "sonar.projectName", "Divorce :: case-formatter-service"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

task developAddRelaseSuffix() {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}
