#!groovy
import uk.gov.hmcts.contino.GithubAPI

class AdditionalTestLabels {
    private Labels = []
    private LabelStates = [:]
    private AtLeastOneEnabled = false

    private void setLabelStates() {
        def states = [:]
        // Get labels from GitHub repo
        def repoLabels = new GithubAPI(this).getLabelsbyPattern(env.BRANCH_NAME, "enable_")

        // Check existence of provided label, and store in states map
        def getState = { label ->
            if (label == "atLeastOneEnabled") {
                return
            }
            def labelExists = repoLabels.contains(label) ? true : false
            states.put(label, labelExists)
        }

        // Iterate over labels List to build LabelStates map
        this.Labels.each { label -> getState(label) }

        // Hardcode enable_all_tests_and_scans label
        if (!states.containsKey("enable_all_tests_and_scans")) {
            getState("enable_all_tests_and_scans")
        }

        this.LabelStates = states
    }

    Boolean getLabelState(label) {
        return (this.LabelStates.enable_all_tests_and_scans || this.LabelStates.get(label))
    }

    Boolean isAtLeastOneEnabled() {
        return this.AtLeastOneEnabled
    }

    AdditionalTestLabels(final ArrayList labels) {
        // Define labels
        this.Labels = labels
        // Define label states
        this.setLabelStates()
        // Check if at least one label state is true
        this.AtLeastOneEnabled = this.LabelStates.any {key, value -> value == true }
    }
}

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Divorce Case Formatter Service',
        projectUrlStr: 'https://github.com/hmcts/div-case-formatter-service'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "div"
def component = "cfs"

def channel = '#div-dev'

def labels = [
    "enable_fortify_scan",
]
def ATLabels = new AdditionalTestLabels(labels)

withPipeline(type , product, component) {

    enableAksStagingDeployment()
    disableLegacyDeployment()

    after('checkout') {
        echo '${product}-${component} checked out'
    }

    before('functionalTest:aat') {
        env.test_environment = 'aat'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    // Kubernetes does not retrieve variables from the output terraform
    before('functionalTest:preview') {
        env.test_environment = 'aat'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    enableSlackNotifications(channel)
}

if (ATLabels.isAtLeastOneEnabled()) {
    properties([
        parameters([
            string(name: 'URL_TO_TEST', defaultValue: 'http://div-cfs-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against')
        ])
    ])

    withNightlyPipeline(type, product, component) {
        env.TEST_URL = params.URL_TO_TEST
        env.Rules = params.SecurityRules

        if (ATLabels.getLabelState("enable_fortify_scan")) {
            enableFortifyScan()

            after('fortify-scan') {
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
            }
        }
    }
}
